// program to find log(n) using Recursion
#include <stdio.h>

unsigned int Log2n(unsigned int n)
{
	return (n > 1) ? 1 + Log2n(n / 2) : 0;
}

int main()
{
	unsigned int n = 32;
	printf("%u", Log2n(n));
	getchar();
	return 0;
}







// C++ program to find log(n) using Recursion
#include <iostream>
using namespace std;

unsigned int Log2n(unsigned int n)
{
	return (n > 1) ? 1 + Log2n(n / 2) : 0;
}

// Driver code
int main()
{
	unsigned int n = 32;
	cout << Log2n(n);
	getchar();
	return 0;
}

// This code is contributed by kirti








// C program to find log(n) using Inbuilt
// function of <math.h> library
#include <math.h>
#include <stdio.h>
int main()
{
	unsigned int n = 32;
	printf("%d", (int)log2(n));
	return 0;
}






// C++ program to find log(n) using Inbuilt
#include <bits/stdc++.h>
using namespace std;

int main()
{
	unsigned int n = 32;
	cout << (log(32) / log(2));
	return 0;
}

// This code is contributed by UJJWAL BHARDWAJ






// C program to find log(n) on arbitrary base using Recursion
#include <stdio.h>

unsigned int Logn(unsigned int n, unsigned int r)
{
	return (n > r - 1) ? 1 + Logn(n / r, r) : 0;
}

int main()
{
	unsigned int n = 256;
	unsigned int r = 3;
	printf("%u", Logn(n, r));
	return 0;
}







// C++ program to find log(n) on arbitrary
// base using Recursion
#include <bits/stdc++.h>
using namespace std;

unsigned int Logn(unsigned int n,
				unsigned int r)
{
	return (n > r - 1) ? 1 +
	Logn(n / r, r) : 0;
}

// Driver code
int main()
{
	unsigned int n = 256;
	unsigned int r = 3;
	
	cout << Logn(n, r);
	
	return 0;
}

// This code is contributed by UJJWAL BHARDWAJ








// C program to find log(n) on arbitrary base
// using log() function of maths library
#include <math.h>
#include <stdio.h>

unsigned int Logn(unsigned int n, unsigned int r)
{
	return log(n) / log(r);
}

int main()
{
	unsigned int n = 256;
	unsigned int r = 3;
	printf("%u", Logn(n, r));

	return 0;
}
