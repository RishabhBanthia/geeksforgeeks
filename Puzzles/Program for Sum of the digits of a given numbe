// C program to compute sum of digits in
// number.
#include <stdio.h>

/* Function to get sum of digits */
int getSum(int n)
{
	int sum = 0;
	while (n != 0) {
		sum = sum + n % 10;
		n = n / 10;
	}
	return sum;
}

// Driver code
int main()
{
	int n = 687;
	printf(" %d ", getSum(n));
	return 0;
}






// C program to compute sum of digits in
// number.
#include <iostream>
using namespace std;

/* Function to get sum of digits */
class gfg {
public:
	int getSum(int n)
	{
		int sum = 0;
		while (n != 0) {
			sum = sum + n % 10;
			n = n / 10;
		}
		return sum;
	}
};

// Driver code
int main()
{
	gfg g;
	int n = 687;
	cout << g.getSum(n);
	return 0;
}
// This code is contributed by Soumik







#include <stdio.h>

/* Function to get sum of digits */
int getSum(int n)
{
	int sum;

	/* Single line that calculates sum */
	for (sum = 0; n > 0; sum += n % 10, n /= 10)
		;

	return sum;
}

// Driver code
int main()
{
	int n = 687;
	printf(" %d ", getSum(n));
	return 0;
}







#include <iostream>
using namespace std;

/* Function to get sum of digits */
class gfg {
public:
	int getSum(int n)
	{
		int sum;

		/* Single line that calculates sum */
		for (sum = 0; n > 0; sum += n % 10, n /= 10)
			;

		return sum;
	}
};

// Driver code
int main()
{
	gfg g;
	int n = 687;
	cout << g.getSum(n);
	return 0;
}
// This code is contributed by Soumik







// C program to compute
// sum of digits in number.
#include <stdio.h>
using namespace std;
int sumDigits(int no)
{
	return no == 0 ? 0 : no % 10 + sumDigits(no / 10);
}

int main(void)
{
	printf("%d", sumDigits(687));
	return 0;
}






// C++ program to compute
// sum of digits in number.
#include <iostream>
using namespace std;
class gfg {
public:
	int sumDigits(int no)
	{
		return no == 0 ? 0 : no % 10 + sumDigits(no / 10);
	}
};

// Driver code
int main(void)
{
	gfg g;
	cout << g.sumDigits(687);
	return 0;
}






// C++ implementation of the above approach
#include <iostream>
using namespace std;
int getSum(string str)
{
	int sum = 0;

	// Traversing through the string
	for (int i = 0; i < str.length(); i++) {
		// Since ascii value of
		// numbers starts from 48
		// so we subtract it from sum
		sum = sum + str[i] - 48;
	}
	return sum;
}

// Driver Code
int main()
{
	string st = "123456789123456789123422";
	cout << getSum(st);
	return 0;
}







// C++ program for the above approach
#include <iostream>
using namespace std;

// Function to check sum
// of digit using tail recursion
int sum_of_digit(int n, int val)
{
	if (n < 10)
	{
		val = val + n;
		return val;
	}
	return sum_of_digit(n / 10, (n % 10) + val);
}

// Driver code
int main()
{
	int num = 12345;
	int result = sum_of_digit(num, 0);
	
	cout << "Sum of digits is " << result;
	
	return 0;
}

// This code is contributed by subhammahato348
