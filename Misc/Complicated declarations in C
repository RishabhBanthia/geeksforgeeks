#include <stdio.h>
int (*fp)();
int func(void) { printf("hello\n"); }

int main()
{
	fp = func;
	(*fp)();
	// fp(); // This will also call func
	return 0;
}















#include <stdio.h>
int (*daytab)[13];
int arr[13] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };
int main()
{
	daytab = &arr;
	printf("arr[2] = %d\n", (*daytab)[2]);
	return 0;
}














#include <stdio.h>
void (*f[10])(int, int);
void func1(int a, int b)
{
	printf("func1 = %d, %d\n", a, b);
}
void func2(int p, int q)
{
	printf("func2 = %d, %d\n", p, q);
}
void func3(int x, int y)
{
	printf("func3 = %d, %d\n", x, y);
}
int main()
{
	f[0] = func1;
	f[1] = func2;
	f[2] = func3;
	(*f[0])(1, 2);
	(*f[1])(3, 4);
	(*f[2])(5, 6);
	return 0;
}






/* Example */

#include <stdio.h>
char func1() { return 'a'; }
char func2() { return 'b'; }
char func3() { return 'c'; }

char (*xarr[])() = { func1, func2, func3 };
char (*(*x())[])() { return &xarr; }

int main()
{
	printf("%c\n", ((*(x()))[0])());
	printf("%c\n", ((*(x()))[1])());
	printf("%c\n", ((*(x()))[2])());
	return 0;
}








/* Example */

#include <stdio.h>

typedef char charray5[5];

charray5 carr1 = { 'a', 'b', 'c', 'd', '\0' };
charray5 carr2 = { 'q', 'w', 'e', 'r', '\0' };
charray5 carr3 = { 'x', 'y', 'z', 'w', '\0' };

charray5* func1() { return &carr1; }
charray5* func2() { return &carr2; }
charray5* func3() { return &carr3; }

char (*(*x[3])())[5] = { func1, func2, func3 };

int main()
{
	printf("func1 = [%c, %c, %c, %c]\n",
		((*(x[0]))())[0][0], ((*(x[0]))())[0][1],
		((*(x[0]))())[0][2], ((*(x[0]))())[0][3]);
	printf("func2 = [%c, %c, %c, %c]\n",
		((*(x[1]))())[0][0], ((*(x[1]))())[0][1],
		((*(x[1]))())[0][2], ((*(x[1]))())[0][3]);
	printf("func3 = [%c, %c, %c, %c]\n",
		((*(x[2]))())[0][0], ((*(x[2]))())[0][1],
		((*(x[2]))())[0][2], ((*(x[2]))())[0][3]);
	return 0;
}









/* Example */

#include <stdio.h>

int a = 1;
int b = 2;
int* func1() { return &a; }
int* func2() { return &b; }

int* (*funcp1())() { return func1; }
int* (*funcp2())() { return func2; }
int* (*(*arr[5])())() = { funcp1, funcp2 };

int main()
{
	printf("%d\n", *(*(*arr[0])())());
	printf("%d\n", *(*(*arr[1])())());
	return 0;
}







#include <stdio.h>

void on_sig10_exit(int u) { printf("sig10 exit\n"); }
void on_sig20_exit(int u) { printf("sig20 exit\n"); }
void default_exit(int u) { printf("default exit\n"); }
void user_default_exit(int u)
{
	printf("user default exit\n");
}

void (*exit_by)(int);

void (*bsd_signal(int sig, void (*func)(int)))(int)
{
	switch (sig) {
	case 10:
		return on_sig10_exit;
	case 20:
		return on_sig20_exit;
	default:
		if (func == NULL)
			return default_exit;
		else
			return user_default_exit;
	}
}

int main()
{
	(bsd_signal(10, NULL))(0);
	(bsd_signal(20, NULL))(0);
	(bsd_signal(30, NULL))(0);
	(bsd_signal(30, user_default_exit))(0);
	return 0;
}
