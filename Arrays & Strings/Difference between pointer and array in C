// 1st program to show that array and pointers are different
#include <stdio.h>

int main()
{
	int arr[] = { 10, 20, 30, 40, 50, 60 };
	int* ptr = arr;

	// sizof(int) * (number of element in arr[]) is printed
	printf("Size of arr[] %ld\n", sizeof(arr));

	// sizeof a pointer is printed which is same for all
	// type of pointers (char *, void *, etc)
	printf("Size of ptr %ld", sizeof(ptr));
	return 0;
}









// 1st program to show that array and pointers are different
#include <iostream>
using namespace std;

int main()
{
	int arr[] = { 10, 20, 30, 40, 50, 60 };
	int* ptr = arr;

	// sizof(int) * (number of element in arr[]) is printed
	cout << "Size of arr[] " << sizeof(arr) << "\n";

	// sizeof a pointer is printed which is same for all
	// type of pointers (char *, void *, etc)
	cout << "Size of ptr " << sizeof(ptr);
	return 0;
}









// IInd program to show that array and pointers are different
#include <stdio.h>

int main()
{
int arr[] = {10, 20}, x = 10;
int *ptr = &x; // This is fine
arr = &x; // Compiler Error
return 0;
}








// IInd program to show that array
// and pointers are different
#include <iostream>
using namespace std;

int main()
{
int arr[] = {10, 20}, x = 10;
int *ptr = &x; // This is fine
arr = &x; // Compiler Error
return 0;
}

// This code is contributed by Shubhamsingh10











#include <stdio.h>
int main()
{
	int arr[] = { 10, 20, 30, 40, 50, 60 };
	// Assigns address of array to ptr
	int* ptr = arr;
	printf("Value of first element is %d", *ptr);
	return 0;
}









// 1st program to show that array and pointers are different
#include <iostream>
using namespace std;
int main()
{
	int arr[] = { 10, 20, 30, 40, 50, 60 };

	// Assigns address of array to ptr
	int* ptr = arr;
	cout << "Value of first element is " << *ptr;
	return 0;
}








#include <stdio.h>

int main()
{
int arr[] = {10, 20, 30, 40, 50, 60};
int *ptr = arr;
printf("arr[2] = %d\n", arr[2]);
printf("*(arr + 2) = %d\n", *(arr + 2));
printf("ptr[2] = %d\n", ptr[2]);
printf("*(ptr + 2) = %d\n", *(ptr + 2));
return 0;
}
