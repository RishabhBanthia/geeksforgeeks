// C Program to Implement Member functions inside structure
#include <stdio.h>
struct marks {
	int num;
	void
	Set(int temp)
	{
		num = temp;
	}
	void display()
	{
		printf("%d", num);
	}
};
// Driver Program
int main()
{
	struct marks m1;
	m1.Set(9);
	
	m1.display();
}















// C++ Program to Implement Member functions inside
// structure

#include <iostream>
using namespace std;
struct marks {
	int num;
	void
	Set(int temp) // Member function inside Structure to
				// take input and store it in "num"
	{
		num = temp;
	}
	void display() // function used to display the values
	{
		cout << "num=" << num;
	}
};
// Driver Program
int main()
{
	marks m1;
	m1.Set(9); // calling function inside Struct to
			// initialize value to num
	m1.display(); // calling function inside struct to
				// display value of Num
}

// This Code is Contributed by Samyak Jain




// C program to demonstrate that direct
// member initialization is not possible in C
#include <stdio.h>

struct Record {
	int x = 7;
};

// Driver Program
int main()
{
	struct Record s;
	printf("%d", s.x);
	return 0;
}
/* Output : Compiler Error
6:8: error: expected ':', ', ', ';', '}' or
'__attribute__' before '=' token
int x = 7;
		^
In function 'main': */




// C program with structure static member
struct Record {
	static int x;
};

// Driver program
int main()
{
	return 0;
}
/* 6:5: error: expected specifier-qualifier-list
before 'static'
	static int x;
	^*/




// C program to demonstrate that Constructor is not allowed
#include <stdio.h>

struct Student {
	int roll;
	Student(int x)
	{
		roll = x;
	}
};

// Driver Program
int main()
{
	struct Student s(2);
	printf("%d", s.x);
	return 0;
}
/* Output : Compiler Error
[Error] expected specifier-qualifier-list
	before 'Student'
[Error] expected declaration specifiers or
'...' before numeric constant
[Error] 's' undeclared (first use
5555555555in this function)
In function 'main': */





// C program to illustrate empty structure
#include <stdio.h>

// empty structure
struct Record {
};

// Driver program
int main()
{
	struct Record s;
	printf("%lu\n", sizeof(s));
	return 0;
}
