#include <stdio.h>

// A simple representation of the date
struct date 
{
	unsigned int d;
	unsigned int m;
	unsigned int y;
};

int main()
{
	printf("Size of date is %lu bytes\n",
		sizeof(struct date));
	struct date dt = { 31, 12, 2014 };
	printf("Date is %d/%d/%d", dt.d, dt.m, dt.y);
}















#include <stdio.h>

// Space optimized representation of the date
struct date 
{
	int d : 5;
	int m : 4;

	int y;
};

int main()
{
	printf("Size of date is %lu bytes\n",
		sizeof(struct date));
	struct date dt = { 31, 12, 2014 };
	printf("Date is %d/%d/%d", dt.d, dt.m, dt.y);
	return 0;
}














#include <stdio.h>

// A structure without forced alignment
struct test1 
{
	unsigned int x : 5;
	unsigned int y : 8;
};

// A structure with forced alignment
struct test2 
{
	unsigned int x : 5;
	unsigned int : 0;
	unsigned int y : 8;
};

int main()
{
	printf("Size of test1 is %lu bytes\n",
		sizeof(struct test1));
	printf("Size of test2 is %lu bytes\n",
		sizeof(struct test2));
	return 0;
}













#include <stdio.h>
struct test 
{
	unsigned int x : 5;
	unsigned int y : 5;
	unsigned int z;
};
int main()
{
	struct test t;

	printf("Address of t.x is %p", &t.x);
	printf("Address of t.z is %p", &t.z);
	return 0;
}












#include <stdio.h>
struct test {
	unsigned int x : 2;
	unsigned int y : 2;
	unsigned int z : 2;
};
int main()
{
	struct test t;
	t.x = 5;
	printf("%d", t.x);
	return 0;
}




struct test {
	unsigned int x[10] : 5;
};

int main()
{
}
